<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RESTBody.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RESTBody</TokenIdentifier>
			<Abstract type="html">An HTTP request/response body.
    Consists of a content blob, and a set of HTTP entity headers. </Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>
			
			<NodeRef refid="28"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RESTBody/entityHeadersFrom:</TokenIdentifier>
			<Abstract type="html">Returns a sub-dictionary of the input, containing only the HTTP 1.1 entity headers and their values.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>+ (NSDictionary *)entityHeadersFrom:(NSDictionary *)headers</Declaration>
			
			
			<Anchor>//api/name/entityHeadersFrom:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RESTBody/initWithContent:headers:resource:</TokenIdentifier>
			<Abstract type="html">Initializes an instance with content and HTTP entity headers.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>- (id)initWithContent:(NSData *)content headers:(NSDictionary *)headers resource:(RESTResource *)resource</Declaration>
			
			
			<Anchor>//api/name/initWithContent:headers:resource:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RESTBody/initWithData:contentType:</TokenIdentifier>
			<Abstract type="html">Initializes an instance with content and a Content-Type: header.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>- (id)initWithData:(NSData *)content contentType:(NSString *)contentType</Declaration>
			
			
			<Anchor>//api/name/initWithData:contentType:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RESTBody/setContent:</TokenIdentifier>
			<Abstract type="html">The raw content.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly, copy) NSData *content</Declaration>
			
			
			<Anchor>//api/name/content</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RESTBody/content</TokenIdentifier>
			<Abstract type="html">The raw content.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly, copy) NSData *content</Declaration>
			
			
			<Anchor>//api/name/content</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RESTBody/setHeaders:</TokenIdentifier>
			<Abstract type="html">The HTTP headers, with standard capitalization (first letter of each word capitalized.)</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly, copy) NSDictionary *headers</Declaration>
			
			
			<Anchor>//api/name/headers</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RESTBody/headers</TokenIdentifier>
			<Abstract type="html">The HTTP headers, with standard capitalization (first letter of each word capitalized.)</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly, copy) NSDictionary *headers</Declaration>
			
			
			<Anchor>//api/name/headers</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RESTBody/setResource:</TokenIdentifier>
			<Abstract type="html">The owning RESTResource.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly, retain) RESTResource *resource</Declaration>
			
			
			<Anchor>//api/name/resource</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RESTBody/resource</TokenIdentifier>
			<Abstract type="html">The owning RESTResource.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly, retain) RESTResource *resource</Declaration>
			
			
			<Anchor>//api/name/resource</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RESTBody/setContentType:</TokenIdentifier>
			<Abstract type="html">The value of the Content-Type: header.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly, copy) NSString *contentType</Declaration>
			
			
			<Anchor>//api/name/contentType</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RESTBody/contentType</TokenIdentifier>
			<Abstract type="html">The value of the Content-Type: header.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly, copy) NSString *contentType</Declaration>
			
			
			<Anchor>//api/name/contentType</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RESTBody/setETag:</TokenIdentifier>
			<Abstract type="html">The value of the Etag: header.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly, copy) NSString *eTag</Declaration>
			
			
			<Anchor>//api/name/eTag</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RESTBody/eTag</TokenIdentifier>
			<Abstract type="html">The value of the Etag: header.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly, copy) NSString *eTag</Declaration>
			
			
			<Anchor>//api/name/eTag</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RESTBody/setLastModified:</TokenIdentifier>
			<Abstract type="html">The value of the Last-Modified: header.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly, copy) NSString *lastModified</Declaration>
			
			
			<Anchor>//api/name/lastModified</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RESTBody/lastModified</TokenIdentifier>
			<Abstract type="html">The value of the Last-Modified: header.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly, copy) NSString *lastModified</Declaration>
			
			
			<Anchor>//api/name/lastModified</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RESTBody/setAsString:</TokenIdentifier>
			<Abstract type="html">Content parsed as string.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly) NSString *asString</Declaration>
			
			
			<Anchor>//api/name/asString</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RESTBody/asString</TokenIdentifier>
			<Abstract type="html">Content parsed as string.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly) NSString *asString</Declaration>
			
			
			<Anchor>//api/name/asString</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RESTBody/setFromJSON:</TokenIdentifier>
			<Abstract type="html">Parses the content as JSON and returns the result.
    This value is cached, so subsequent calls are cheap. </Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly) id fromJSON</Declaration>
			
			
			<Anchor>//api/name/fromJSON</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RESTBody/fromJSON</TokenIdentifier>
			<Abstract type="html">Parses the content as JSON and returns the result.
    This value is cached, so subsequent calls are cheap. </Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>@property (readonly) id fromJSON</Declaration>
			
			
			<Anchor>//api/name/fromJSON</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RESTBody/dataWithJSONObject:</TokenIdentifier>
			<Abstract type="html">Converts an object to UTF-8-encoded JSON data.
    JSON &apos;fragments&apos; (NSString / NSNumber) are allowed. Returns nil on nil input. </Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>+ (NSData *)dataWithJSONObject:(id)obj</Declaration>
			
			
			<Anchor>//api/name/dataWithJSONObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RESTBody/stringWithJSONObject:</TokenIdentifier>
			<Abstract type="html">Converts an object to a JSON string.
    JSON &apos;fragments&apos; (NSString / NSNumber) are allowed. Returns nil on nil input. </Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)stringWithJSONObject:(id)obj</Declaration>
			
			
			<Anchor>//api/name/stringWithJSONObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RESTBody/prettyStringWithJSONObject:</TokenIdentifier>
			<Abstract type="html">Converts an object to a pretty-printed JSON string.
    JSON &apos;fragments&apos; (NSString / NSNumber) are allowed. Returns nil on nil input. </Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)prettyStringWithJSONObject:(id)obj</Declaration>
			
			
			<Anchor>//api/name/prettyStringWithJSONObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RESTBody/JSONObjectWithData:</TokenIdentifier>
			<Abstract type="html">Parses JSON data into a Foundation object tree.
    If parsing fails, returns nil. </Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>+ (id)JSONObjectWithData:(NSData *)data</Declaration>
			
			
			<Anchor>//api/name/JSONObjectWithData:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RESTBody/JSONObjectWithString:</TokenIdentifier>
			<Abstract type="html">Parses a JSON string into a Foundation object tree.
    If parsing fails, returns nil. </Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>+ (id)JSONObjectWithString:(NSString *)string</Declaration>
			
			
			<Anchor>//api/name/JSONObjectWithString:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RESTBody/JSONObjectWithDate:</TokenIdentifier>
			<Abstract type="html">Converts an NSDate to a string in ISO-8601 format (standard JSON representation).</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)JSONObjectWithDate:(NSDate *)date</Declaration>
			
			
			<Anchor>//api/name/JSONObjectWithDate:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RESTBody/dateWithJSONObject:</TokenIdentifier>
			<Abstract type="html">Parses a string in ISO-8601 date format into an NSDate.
    Returns nil if the string isn&apos;t parseable, or if it isn&apos;t a string at all. </Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>+ (NSDate *)dateWithJSONObject:(id)jsonObject</Declaration>
			
			
			<Anchor>//api/name/dateWithJSONObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RESTBody/base64WithData:</TokenIdentifier>
			<Abstract type="html">Encodes NSData to a Base64 string, which can be stored in JSON.</Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)base64WithData:(NSData *)data</Declaration>
			
			
			<Anchor>//api/name/base64WithData:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RESTBody/dataWithBase64:</TokenIdentifier>
			<Abstract type="html">Decodes a Base64 string to NSData.
    Returns nil if the string is not valid Base64, or is not a string at all. </Abstract>
			<DeclaredIn>RESTBody.h</DeclaredIn>			
			
			<Declaration>+ (NSData *)dataWithBase64:(NSString *)base64</Declaration>
			
			
			<Anchor>//api/name/dataWithBase64:</Anchor>
		</Token>
		
	</File>
</Tokens>