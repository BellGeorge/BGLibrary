<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CouchServer.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CouchServer</TokenIdentifier>
			<Abstract type="html">The top level of a CouchDB server. Contains CouchDatabases.</Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>
			
			<NodeRef refid="20"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/initWithURL:</TokenIdentifier>
			<Abstract type="html">Initialize given a server URL.</Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>- (id)initWithURL:(NSURL *)url</Declaration>
			
			
			<Anchor>//api/name/initWithURL:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/init</TokenIdentifier>
			<Abstract type="html">Without a URL, connects to localhost on default port 5984.</Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>- (id)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/close</TokenIdentifier>
			<Abstract type="html">Releases all resources used by the CouchServer instance.</Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>- (void)close</Declaration>
			
			
			<Anchor>//api/name/close</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/getVersion:</TokenIdentifier>
			<Abstract type="html">Fetches the server&apos;s current version string. (Synchronous)</Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>- (NSString *)getVersion:(NSError **)outError</Declaration>
			
			
			<Anchor>//api/name/getVersion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/generateUUIDs:</TokenIdentifier>
			<Abstract type="html">Returns an array of unique-ID strings generated by the server. (Synchronous)</Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)generateUUIDs:(NSUInteger)count</Declaration>
			
			
			<Anchor>//api/name/generateUUIDs:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/generateDocumentID</TokenIdentifier>
			<Abstract type="html">Returns a single new document ID generated by the server. (Synchronous)</Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>- (NSString *)generateDocumentID</Declaration>
			
			
			<Anchor>//api/name/generateDocumentID</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/getDatabases</TokenIdentifier>
			<Abstract type="html">Returns array of CouchDatabase objects representing all the databases on the server. (Synchronous)</Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)getDatabases</Declaration>
			
			
			<Anchor>//api/name/getDatabases</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/databaseNamed:</TokenIdentifier>
			<Abstract type="html">Just creates a CouchDatabase object; makes no calls to the server.
    The database doesn&apos;t need to exist (you can call -create on it afterwards to create it.)
    Multiple calls with the same name will return the same CouchDatabase instance. </Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>- (CouchDatabase *)databaseNamed:(NSString *)name</Declaration>
			
			
			<Anchor>//api/name/databaseNamed:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/objectForKeyedSubscript:</TokenIdentifier>
			<Abstract type="html">Same as databaseNamed:. Enables &quot;[]&quot; access in Xcode 4.4+</Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>- (id)objectForKeyedSubscript:(NSString *)key</Declaration>
			
			
			<Anchor>//api/name/objectForKeyedSubscript:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/setActiveTasks:</TokenIdentifier>
			<Abstract type="html">The list of active server tasks, as parsed JSON (observable).
    This is updated asynchronously while the activityPollInterval is nonzero. </Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSArray *activeTasks</Declaration>
			
			
			<Anchor>//api/name/activeTasks</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CouchServer/activeTasks</TokenIdentifier>
			<Abstract type="html">The list of active server tasks, as parsed JSON (observable).
    This is updated asynchronously while the activityPollInterval is nonzero. </Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSArray *activeTasks</Declaration>
			
			
			<Anchor>//api/name/activeTasks</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/checkActiveTasks</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>- (void)checkActiveTasks</Declaration>
			
			
			<Anchor>//api/name/checkActiveTasks</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/setActivityPollInterval:</TokenIdentifier>
			<Abstract type="html">How often to poll the server&apos;s list of active tasks and update .activeTasks.</Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>@property NSTimeInterval activityPollInterval</Declaration>
			
			
			<Anchor>//api/name/activityPollInterval</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CouchServer/activityPollInterval</TokenIdentifier>
			<Abstract type="html">How often to poll the server&apos;s list of active tasks and update .activeTasks.</Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>@property NSTimeInterval activityPollInterval</Declaration>
			
			
			<Anchor>//api/name/activityPollInterval</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/setReplications:</TokenIdentifier>
			<Abstract type="html">All currently defined CouchPersistentReplications (as stored in the replicator database.)
    To create a replication, use the methods on CouchDatabase. </Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>@property (readonly) NSArray *replications</Declaration>
			
			
			<Anchor>//api/name/replications</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CouchServer/replications</TokenIdentifier>
			<Abstract type="html">All currently defined CouchPersistentReplications (as stored in the replicator database.)
    To create a replication, use the methods on CouchDatabase. </Abstract>
			<DeclaredIn>CouchServer.h</DeclaredIn>			
			
			<Declaration>@property (readonly) NSArray *replications</Declaration>
			
			
			<Anchor>//api/name/replications</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/setIsEmbeddedServer:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CouchInternal.h</DeclaredIn>			
			
			<Declaration>@property (readonly) BOOL isEmbeddedServer</Declaration>
			
			
			<Anchor>//api/name/isEmbeddedServer</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CouchServer/isEmbeddedServer</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CouchInternal.h</DeclaredIn>			
			
			<Declaration>@property (readonly) BOOL isEmbeddedServer</Declaration>
			
			
			<Anchor>//api/name/isEmbeddedServer</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/replicationWithSource:target:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CouchInternal.h</DeclaredIn>			
			
			<Declaration>- (CouchPersistentReplication *)replicationWithSource:(NSString *)source target:(NSString *)target</Declaration>
			
			
			<Anchor>//api/name/replicationWithSource:target:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CouchServer/registerActiveTask:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CouchInternal.h</DeclaredIn>			
			
			<Declaration>- (void)registerActiveTask:(NSDictionary *)activeTask</Declaration>
			
			
			<Anchor>//api/name/registerActiveTask:</Anchor>
		</Token>
		
	</File>
</Tokens>