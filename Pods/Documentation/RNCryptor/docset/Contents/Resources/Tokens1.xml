<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RNCryptor.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RNCryptor</TokenIdentifier>
			<Abstract type="html">Encryptor/Decryptor for iOS</Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RNCryptor/setSettings:</TokenIdentifier>
			<Abstract type="html">Immutable settings for cryptor.</Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) RNCryptorSettings settings</Declaration>
			
			
			<Anchor>//api/name/settings</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RNCryptor/settings</TokenIdentifier>
			<Abstract type="html">Immutable settings for cryptor.</Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) RNCryptorSettings settings</Declaration>
			
			
			<Anchor>//api/name/settings</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RNCryptor/AES256Cryptor</TokenIdentifier>
			<Abstract type="html">Shared AES-256 encryptor</Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>+ (RNCryptor *)AES256Cryptor</Declaration>
			
			
			<Anchor>//api/name/AES256Cryptor</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RNCryptor/errorWithCode:localizedDescription:underlyingError:</TokenIdentifier>
			<Abstract type="html">Create a customiced cryptor</Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>+ (NSError *)errorWithCode:(int)code localizedDescription:(NSString *)localizedDescription underlyingError:(NSError *)underlyingError</Declaration>
			<Parameters>
				<Parameter>
					<Name>settings</Name>
					<Abstract type="html">Immutable settings for cryptor.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/errorWithCode:localizedDescription:underlyingError:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RNCryptor/initWithSettings:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>- (RNCryptor *)initWithSettings:(RNCryptorSettings)settings</Declaration>
			
			
			<Anchor>//api/name/initWithSettings:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RNCryptor/performOperation:fromStream:readCallback:toStream:writeCallback:encryptionKey:IV:footerSize:footer:error:</TokenIdentifier>
			<Abstract type="html">Most fundamental encryption/decryption method. Does nothing but encrypt or decrypt the data given the current settings.
Provides callbacks during reading and writing, and can exclude the end of the stream (the &quot;footer&quot;) from processing.</Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>- (BOOL)performOperation:(CCOperation)operation fromStream:(NSInputStream *)fromStream readCallback:(RNCryptorReadCallback)readCallback toStream:(NSOutputStream *)toStream writeCallback:(RNCryptorWriteCallback)writeCallback encryptionKey:(NSData *)encryptionKey IV:(NSData *)IV footerSize:(NSUInteger)footerSize footer:(NSData **)footer error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>operation</Name>
					<Abstract type="html">CCEncrypt or CCDecrypt</Abstract>
				</Parameter><Parameter>
					<Name>fromStream</Name>
					<Abstract type="html">Stream to read. May be opened or unopened.</Abstract>
				</Parameter><Parameter>
					<Name>readCallback</Name>
					<Abstract type="html">Block to call with data read from fromStream</Abstract>
				</Parameter><Parameter>
					<Name>toStream</Name>
					<Abstract type="html">Stream to write. May be opened or unopened.</Abstract>
				</Parameter><Parameter>
					<Name>writeCallback</Name>
					<Abstract type="html">Block to call with data successfully written to toStream.</Abstract>
				</Parameter><Parameter>
					<Name>encryptionKey</Name>
					<Abstract type="html">Encryption key of correct length for algorithm. This is not a password. No hashing or PBKDF will be applied.</Abstract>
				</Parameter><Parameter>
					<Name>IV</Name>
					<Abstract type="html">Initialization vector of correct length for algorithm. For &quot;no IV,&quot; you must pass a zero-filled block of the correct length. This is strongly discouraged.</Abstract>
				</Parameter><Parameter>
					<Name>footerSize</Name>
					<Abstract type="html">Size in bytes of the footer. This is the end of the stream that should not be processed. May be 0.</Abstract>
				</Parameter><Parameter>
					<Name>footer</Name>
					<Abstract type="html">If footerSize &gt; 0, then this will contain the footer data by reference.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">If there is an error, this will contain the NSError by reference</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES on success. NO on failure, and error will contain the error object.</Abstract></ReturnValue>
			<Anchor>//api/name/performOperation:fromStream:readCallback:toStream:writeCallback:encryptionKey:IV:footerSize:footer:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RNCryptor/encryptFromStream:toStream:encryptionKey:HMACKey:error:</TokenIdentifier>
			<Abstract type="html">Encrypt from a stream, to a stream, provided an encryption key and optional HMAC key.
A random IV will be written to the beginning of the stream. If an HMAC key is provided, the HMAC of the ciphertext
will be written the the end of the stream.</Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>- (BOOL)encryptFromStream:(NSInputStream *)fromStream toStream:(NSOutputStream *)toStream encryptionKey:(NSData *)encryptionKey HMACKey:(NSData *)HMACKey error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>fromStream</Name>
					<Abstract type="html">Stream to read. May be opened or unopened.</Abstract>
				</Parameter><Parameter>
					<Name>toStream</Name>
					<Abstract type="html">Stream to write. May be opened or unopened.</Abstract>
				</Parameter><Parameter>
					<Name>encryptionKey</Name>
					<Abstract type="html">Encryption key of correct length for algorithm. This is not a password. No hashing or PBKDF will be applied.</Abstract>
				</Parameter><Parameter>
					<Name>HMACKey</Name>
					<Abstract type="html">HMAC key. This can be of any length. It is discouraged to make this the same as encryptionKey. If HMACKey is nil, no HMAC will be written.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">If there is an error, this will contain the NSError by reference</Abstract>
				</Parameter><Parameter>
					<Name>IV</Name>
					<Abstract type="html">Initialization vector of correct length for algorithm. For &quot;no IV,&quot; you must pass a zero-filled block of the correct length. This is strongly discouraged.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES on success. NO on failure, and error will contain the error object.`</Abstract></ReturnValue>
			<Anchor>//api/name/encryptFromStream:toStream:encryptionKey:HMACKey:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RNCryptor/decryptFromStream:toStream:encryptionKey:HMACKey:error:</TokenIdentifier>
			<Abstract type="html">Decrypt from a stream, to a stream, provided an encryption key (not password), and optional HMAC key.
The IV must be at the start of the stream
The HMAC of the ciphertext will be read from the end of the stream if an HMAC key is provided. If there is an HMAC,
then it must match, or this method will return NO.</Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>- (BOOL)decryptFromStream:(NSInputStream *)fromStream toStream:(NSOutputStream *)toStream encryptionKey:(NSData *)encryptionKey HMACKey:(NSData *)HMACKey error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>fromStream</Name>
					<Abstract type="html">Stream to read. May be opened or unopened.</Abstract>
				</Parameter><Parameter>
					<Name>toStream</Name>
					<Abstract type="html">Stream to write. May be opened or unopened.</Abstract>
				</Parameter><Parameter>
					<Name>encryptionKey</Name>
					<Abstract type="html">Encryption key of correct length for algorithm. This is not a password. No hashing or PBKDF will be applied.</Abstract>
				</Parameter><Parameter>
					<Name>HMACKey</Name>
					<Abstract type="html">HMAC key, matching the encryption key.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">If there is an error, this will contain the NSError by reference</Abstract>
				</Parameter><Parameter>
					<Name>IV</Name>
					<Abstract type="html">Initialization vector of correct length for algorithm. For &quot;no IV,&quot; you must pass a zero-filled block of the correct length. This is strongly discouraged.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES on success. NO on failure (including HMAC mismatch), and error will contain the error object.</Abstract></ReturnValue>
			<Anchor>//api/name/decryptFromStream:toStream:encryptionKey:HMACKey:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RNCryptor/encryptFromStream:toStream:password:error:</TokenIdentifier>
			<Abstract type="html">Encrypt from a stream, to a stream, provided a password.
Automatically generates required salts and IV. Prepends header and appends HMAC.
Full format is described at https://github.com/rnapier/RNCryptor/wiki/Data-Format</Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>- (BOOL)encryptFromStream:(NSInputStream *)fromStream toStream:(NSOutputStream *)toStream password:(NSString *)password error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>fromStream</Name>
					<Abstract type="html">Stream to read. May be opened or unopened.</Abstract>
				</Parameter><Parameter>
					<Name>toStream</Name>
					<Abstract type="html">Stream to write. May be opened or unopened.</Abstract>
				</Parameter><Parameter>
					<Name>password</Name>
					<Abstract type="html">Password to use for encryption</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">If there is an error, this will contain the NSError by reference</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES on success. NO on failure, and error will contain the error object.</Abstract></ReturnValue>
			<Anchor>//api/name/encryptFromStream:toStream:password:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RNCryptor/encryptFromURL:toURL:append:password:error:</TokenIdentifier>
			<Abstract type="html">Encrypt from a URL, to a URL, provided a password.
Automatically generates required salts and IV. Prepends header and appends HMAC.
Full format is described at https://github.com/rnapier/RNCryptor/wiki/Data-Format</Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>- (BOOL)encryptFromURL:(NSURL *)fromURL toURL:(NSURL *)toURL append:(BOOL)append password:(NSString *)password error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>fromURL</Name>
					<Abstract type="html">URL to read.</Abstract>
				</Parameter><Parameter>
					<Name>toURL</Name>
					<Abstract type="html">URL to write.</Abstract>
				</Parameter><Parameter>
					<Name>append</Name>
					<Abstract type="html">Should output be appended rather than overwritng?</Abstract>
				</Parameter><Parameter>
					<Name>password</Name>
					<Abstract type="html">Password to use for encryption</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">If there is an error, this will contain the NSError by reference</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES on success. NO on failure, and error will contain the error object.</Abstract></ReturnValue>
			<Anchor>//api/name/encryptFromURL:toURL:append:password:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RNCryptor/encryptData:password:error:</TokenIdentifier>
			<Abstract type="html">Encrypt data, provided a password.
Automatically generates required salts and IV. Prepends header and appends HMAC.
Full format is described at https://github.com/rnapier/RNCryptor/wiki/Data-Format</Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>- (NSData *)encryptData:(NSData *)plaintext password:(NSString *)password error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>plaintext</Name>
					<Abstract type="html">Data to encrypt</Abstract>
				</Parameter><Parameter>
					<Name>password</Name>
					<Abstract type="html">Password to use for encryption</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">If there is an error, this will contain the NSError by reference</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Encrypted data, or nil if there was an error.</Abstract></ReturnValue>
			<Anchor>//api/name/encryptData:password:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RNCryptor/decryptFromStream:toStream:password:error:</TokenIdentifier>
			<Abstract type="html">Decrypt from a stream, to a stream, provided a password.
Stream must be in format described at https://github.com/rnapier/RNCryptor/wiki/Data-Format, with header,
required salts and IV prepended, and HMAC appended.</Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>- (BOOL)decryptFromStream:(NSInputStream *)fromStream toStream:(NSOutputStream *)toStream password:(NSString *)password error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>fromStream</Name>
					<Abstract type="html">Stream to read. May be opened or unopened.</Abstract>
				</Parameter><Parameter>
					<Name>toStream</Name>
					<Abstract type="html">Stream to write. May be opened or unopened.</Abstract>
				</Parameter><Parameter>
					<Name>password</Name>
					<Abstract type="html">Password to use for decryption</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">If there is an error, this will contain the NSError by reference</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES on success. NO on failure, and error will contain the error object.</Abstract></ReturnValue>
			<Anchor>//api/name/decryptFromStream:toStream:password:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RNCryptor/decryptFromURL:toURL:append:password:error:</TokenIdentifier>
			<Abstract type="html">Decrypt from a URL, to a URL, provided a password.
URL contents must be in format described at https://github.com/rnapier/RNCryptor/wiki/Data-Format, with header,
required salts and IV prepended, and HMAC appended.</Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>- (BOOL)decryptFromURL:(NSURL *)fromURL toURL:(NSURL *)toURL append:(BOOL)append password:(NSString *)password error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>fromURL</Name>
					<Abstract type="html">URL to read.</Abstract>
				</Parameter><Parameter>
					<Name>toURL</Name>
					<Abstract type="html">URL to write.</Abstract>
				</Parameter><Parameter>
					<Name>append</Name>
					<Abstract type="html">Should output be appended rather than overwritng?</Abstract>
				</Parameter><Parameter>
					<Name>password</Name>
					<Abstract type="html">Password to use for decryption</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">If there is an error, this will contain the NSError by reference</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES on success. NO on failure, and error will contain the error object.</Abstract></ReturnValue>
			<Anchor>//api/name/decryptFromURL:toURL:append:password:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RNCryptor/decryptData:password:error:</TokenIdentifier>
			<Abstract type="html">Decrypt data, provided a password.
Data must be in format described at https://github.com/rnapier/RNCryptor/wiki/Data-Format, with header,
required salts and IV prepended, and HMAC appended.</Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>- (NSData *)decryptData:(NSData *)ciphertext password:(NSString *)password error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>ciphertext</Name>
					<Abstract type="html">Data to decrypt</Abstract>
				</Parameter><Parameter>
					<Name>password</Name>
					<Abstract type="html">Password to use for decryption</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">If there is an error, this will contain the NSError by reference</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Decrypted data, or nil if there was an error.</Abstract></ReturnValue>
			<Anchor>//api/name/decryptData:password:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RNCryptor/keyForPassword:salt:</TokenIdentifier>
			<Abstract type="html">Generate key given a password and salt using a PBKDF</Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>- (NSData *)keyForPassword:(NSString *)password salt:(NSData *)salt</Declaration>
			<Parameters>
				<Parameter>
					<Name>password</Name>
					<Abstract type="html">Password to use for PBKDF</Abstract>
				</Parameter><Parameter>
					<Name>salt</Name>
					<Abstract type="html">Salt for password</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Key</Abstract></ReturnValue>
			<Anchor>//api/name/keyForPassword:salt:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RNCryptor/randomDataOfLength:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RNCryptor.h</DeclaredIn>			
			
			<Declaration>+ (NSData *)randomDataOfLength:(size_t)length</Declaration>
			
			
			<Anchor>//api/name/randomDataOfLength:</Anchor>
		</Token>
		
	</File>
</Tokens>