<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Protocols/GCDAsyncSocketDelegate.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intf/GCDAsyncSocketDelegate</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>
			
			<NodeRef refid="7"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/GCDAsyncSocketDelegate/newSocketQueueForConnectionFromAddress:onSocket:</TokenIdentifier>
			<Abstract type="html">This method is called immediately prior to socket:didAcceptNewSocket:.
It optionally allows a listening socket to specify the socketQueue for a new accepted socket.
If this method is not implemented, or returns NULL, the new accepted socket will create its own default queue.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (dispatch_queue_t)newSocketQueueForConnectionFromAddress:(NSData *)address onSocket:(GCDAsyncSocket *)sock</Declaration>
			
			
			<Anchor>//api/name/newSocketQueueForConnectionFromAddress:onSocket:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/GCDAsyncSocketDelegate/socket:didAcceptNewSocket:</TokenIdentifier>
			<Abstract type="html">Called when a socket accepts a connection.
Another socket is automatically spawned to handle it.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)socket:(GCDAsyncSocket *)sock didAcceptNewSocket:(GCDAsyncSocket *)newSocket</Declaration>
			
			
			<Anchor>//api/name/socket:didAcceptNewSocket:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/GCDAsyncSocketDelegate/socket:didConnectToHost:port:</TokenIdentifier>
			<Abstract type="html">Called when a socket connects and is ready for reading and writing.
The host parameter will be an IP address, not a DNS name.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)socket:(GCDAsyncSocket *)sock didConnectToHost:(NSString *)host port:(uint16_t)port</Declaration>
			
			
			<Anchor>//api/name/socket:didConnectToHost:port:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/GCDAsyncSocketDelegate/socket:didReadData:withTag:</TokenIdentifier>
			<Abstract type="html">Called when a socket has completed reading the requested data into memory.
Not called if there is an error.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)socket:(GCDAsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/socket:didReadData:withTag:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/GCDAsyncSocketDelegate/socket:didReadPartialDataOfLength:tag:</TokenIdentifier>
			<Abstract type="html">Called when a socket has read in data, but has not yet completed the read.
This would occur if using readToData: or readToLength: methods.
It may be used to for things such as updating progress bars.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)socket:(GCDAsyncSocket *)sock didReadPartialDataOfLength:(NSUInteger)partialLength tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/socket:didReadPartialDataOfLength:tag:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/GCDAsyncSocketDelegate/socket:didWriteDataWithTag:</TokenIdentifier>
			<Abstract type="html">Called when a socket has completed writing the requested data. Not called if there is an error.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)socket:(GCDAsyncSocket *)sock didWriteDataWithTag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/socket:didWriteDataWithTag:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/GCDAsyncSocketDelegate/socket:didWritePartialDataOfLength:tag:</TokenIdentifier>
			<Abstract type="html">Called when a socket has written some data, but has not yet completed the entire write.
It may be used to for things such as updating progress bars.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)socket:(GCDAsyncSocket *)sock didWritePartialDataOfLength:(NSUInteger)partialLength tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/socket:didWritePartialDataOfLength:tag:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/GCDAsyncSocketDelegate/socket:shouldTimeoutReadWithTag:elapsed:bytesDone:</TokenIdentifier>
			<Abstract type="html">Called if a read operation has reached its timeout without completing.
This method allows you to optionally extend the timeout.
If you return a positive time interval (&gt; 0) the read&apos;s timeout will be extended by the given amount.
If you don&apos;t implement this method, or return a non-positive time interval (&lt;= 0) the read will timeout as usual.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (NSTimeInterval)socket:(GCDAsyncSocket *)sock shouldTimeoutReadWithTag:(long)tag elapsed:(NSTimeInterval)elapsed bytesDone:(NSUInteger)length</Declaration>
			
			
			<Anchor>//api/name/socket:shouldTimeoutReadWithTag:elapsed:bytesDone:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/GCDAsyncSocketDelegate/socket:shouldTimeoutWriteWithTag:elapsed:bytesDone:</TokenIdentifier>
			<Abstract type="html">Called if a write operation has reached its timeout without completing.
This method allows you to optionally extend the timeout.
If you return a positive time interval (&gt; 0) the write&apos;s timeout will be extended by the given amount.
If you don&apos;t implement this method, or return a non-positive time interval (&lt;= 0) the write will timeout as usual.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (NSTimeInterval)socket:(GCDAsyncSocket *)sock shouldTimeoutWriteWithTag:(long)tag elapsed:(NSTimeInterval)elapsed bytesDone:(NSUInteger)length</Declaration>
			
			
			<Anchor>//api/name/socket:shouldTimeoutWriteWithTag:elapsed:bytesDone:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/GCDAsyncSocketDelegate/socketDidCloseReadStream:</TokenIdentifier>
			<Abstract type="html">Conditionally called if the read stream closes, but the write stream may still be writeable.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)socketDidCloseReadStream:(GCDAsyncSocket *)sock</Declaration>
			
			
			<Anchor>//api/name/socketDidCloseReadStream:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/GCDAsyncSocketDelegate/socketDidDisconnect:withError:</TokenIdentifier>
			<Abstract type="html">Called when a socket disconnects with or without error.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)socketDidDisconnect:(GCDAsyncSocket *)sock withError:(NSError *)err</Declaration>
			
			
			<Anchor>//api/name/socketDidDisconnect:withError:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/GCDAsyncSocketDelegate/socketDidSecure:</TokenIdentifier>
			<Abstract type="html">Called after the socket has successfully completed SSL/TLS negotiation.
This method is not called unless you use the provided startTLS method.</Abstract>
			<DeclaredIn>GCDAsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)socketDidSecure:(GCDAsyncSocket *)sock</Declaration>
			
			
			<Anchor>//api/name/socketDidSecure:</Anchor>
		</Token>
		
	</File>
</Tokens>