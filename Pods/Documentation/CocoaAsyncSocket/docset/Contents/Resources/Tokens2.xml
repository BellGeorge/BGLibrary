<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AsyncUdpSocket.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AsyncUdpSocket</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>
			
			<NodeRef refid="2"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/init</TokenIdentifier>
			<Abstract type="html">Creates new instances of AsyncUdpSocket.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (id)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/initWithDelegate:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (id)initWithDelegate:(id)delegate</Declaration>
			
			
			<Anchor>//api/name/initWithDelegate:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/initWithDelegate:userData:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (id)initWithDelegate:(id)delegate userData:(long)userData</Declaration>
			
			
			<Anchor>//api/name/initWithDelegate:userData:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/initIPv4</TokenIdentifier>
			<Abstract type="html">Creates new instances of AsyncUdpSocket that support only IPv4 or IPv6.
The other init methods will support both, unless specifically binded or connected to one protocol.
If you know you&apos;ll only be using one protocol, these init methods may be a bit more efficient.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (id)initIPv4</Declaration>
			
			
			<Anchor>//api/name/initIPv4</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/initIPv6</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (id)initIPv6</Declaration>
			
			
			<Anchor>//api/name/initIPv6</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/delegate</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (id)delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/setDelegate:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (void)setDelegate:(id)delegate</Declaration>
			
			
			<Anchor>//api/name/setDelegate:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/userData</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (long)userData</Declaration>
			
			
			<Anchor>//api/name/userData</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/setUserData:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (void)setUserData:(long)userData</Declaration>
			
			
			<Anchor>//api/name/setUserData:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/localHost</TokenIdentifier>
			<Abstract type="html">Returns the local address info for the socket.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (NSString *)localHost</Declaration>
			
			
			<Anchor>//api/name/localHost</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/localPort</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (UInt16)localPort</Declaration>
			
			
			<Anchor>//api/name/localPort</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/connectedHost</TokenIdentifier>
			<Abstract type="html">Returns the remote address info for the socket.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (NSString *)connectedHost</Declaration>
			
			
			<Anchor>//api/name/connectedHost</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/connectedPort</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (UInt16)connectedPort</Declaration>
			
			
			<Anchor>//api/name/connectedPort</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/isConnected</TokenIdentifier>
			<Abstract type="html">Returns whether or not this socket has been connected to a single host.
By design, UDP is a connectionless protocol, and connecting is not needed.
If connected, the socket will only be able to send/receive data to/from the connected host.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isConnected</Declaration>
			
			
			<Anchor>//api/name/isConnected</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/isClosed</TokenIdentifier>
			<Abstract type="html">Returns whether or not this socket has been closed.
The only way a socket can be closed is if you explicitly call one of the close methods.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isClosed</Declaration>
			
			
			<Anchor>//api/name/isClosed</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/isIPv4</TokenIdentifier>
			<Abstract type="html">Returns whether or not this socket supports IPv4.
By default this will be true, unless the socket is specifically initialized as IPv6 only,
or is binded or connected to an IPv6 address.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isIPv4</Declaration>
			
			
			<Anchor>//api/name/isIPv4</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/isIPv6</TokenIdentifier>
			<Abstract type="html">Returns whether or not this socket supports IPv6.
By default this will be true, unless the socket is specifically initialized as IPv4 only,
or is binded or connected to an IPv4 address.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isIPv6</Declaration>
			
			
			<Anchor>//api/name/isIPv6</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/maximumTransmissionUnit</TokenIdentifier>
			<Abstract type="html">Returns the mtu of the socket.
If unknown, returns zero.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (unsigned int)maximumTransmissionUnit</Declaration>
			
			
			<Anchor>//api/name/maximumTransmissionUnit</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/bindToPort:error:</TokenIdentifier>
			<Abstract type="html">Binds the UDP socket to the given port and optional address.
Binding should be done for server sockets that receive data prior to sending it.
Client sockets can skip binding,
as the OS will automatically assign the socket an available port when it starts sending data.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)bindToPort:(UInt16)port error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/bindToPort:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/bindToAddress:port:error:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)bindToAddress:(NSString *)localAddr port:(UInt16)port error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/bindToAddress:port:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/connectToHost:onPort:error:</TokenIdentifier>
			<Abstract type="html">Connects the UDP socket to the given host and port.
By design, UDP is a connectionless protocol, and connecting is not needed.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)connectToHost:(NSString *)host onPort:(UInt16)port error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/connectToHost:onPort:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/connectToAddress:error:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)connectToAddress:(NSData *)remoteAddr error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/connectToAddress:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/joinMulticastGroup:error:</TokenIdentifier>
			<Abstract type="html">Join multicast group</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)joinMulticastGroup:(NSString *)group error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/joinMulticastGroup:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/joinMulticastGroup:withAddress:error:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)joinMulticastGroup:(NSString *)group withAddress:(NSString *)interface error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/joinMulticastGroup:withAddress:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/enableBroadcast:error:</TokenIdentifier>
			<Abstract type="html">By default, the underlying socket in the OS will not allow you to send broadcast messages.
In order to send broadcast messages, you need to enable this functionality in the socket.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)enableBroadcast:(BOOL)flag error:(NSError **)errPtr</Declaration>
			
			
			<Anchor>//api/name/enableBroadcast:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/sendData:withTimeout:tag:</TokenIdentifier>
			<Abstract type="html">Asynchronously sends the given data, with the given timeout and tag.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)sendData:(NSData *)data withTimeout:(NSTimeInterval)timeout tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/sendData:withTimeout:tag:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/sendData:toHost:port:withTimeout:tag:</TokenIdentifier>
			<Abstract type="html">Asynchronously sends the given data, with the given timeout and tag, to the given host and port.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)sendData:(NSData *)data toHost:(NSString *)host port:(UInt16)port withTimeout:(NSTimeInterval)timeout tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/sendData:toHost:port:withTimeout:tag:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/sendData:toAddress:withTimeout:tag:</TokenIdentifier>
			<Abstract type="html">Asynchronously sends the given data, with the given timeout and tag, to the given address.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)sendData:(NSData *)data toAddress:(NSData *)remoteAddr withTimeout:(NSTimeInterval)timeout tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/sendData:toAddress:withTimeout:tag:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/receiveWithTimeout:tag:</TokenIdentifier>
			<Abstract type="html">Asynchronously receives a single datagram packet.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (void)receiveWithTimeout:(NSTimeInterval)timeout tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/receiveWithTimeout:tag:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/close</TokenIdentifier>
			<Abstract type="html">Closes the socket immediately. Any pending send or receive operations are dropped.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (void)close</Declaration>
			
			
			<Anchor>//api/name/close</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/closeAfterSending</TokenIdentifier>
			<Abstract type="html">Closes after all pending send operations have completed.
After calling this, the sendData: and receive: methods will do nothing.
In other words, you won&apos;t be able to add any more send or receive operations to the queue.
The socket will close even if there are still pending receive operations.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (void)closeAfterSending</Declaration>
			
			
			<Anchor>//api/name/closeAfterSending</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/closeAfterReceiving</TokenIdentifier>
			<Abstract type="html">Closes after all pending receive operations have completed.
After calling this, the sendData: and receive: methods will do nothing.
In other words, you won&apos;t be able to add any more send or receive operations to the queue.
The socket will close even if there are still pending send operations.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (void)closeAfterReceiving</Declaration>
			
			
			<Anchor>//api/name/closeAfterReceiving</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/closeAfterSendingAndReceiving</TokenIdentifier>
			<Abstract type="html">Closes after all pending send and receive operations have completed.
After calling this, the sendData: and receive: methods will do nothing.
In other words, you won&apos;t be able to add any more send or receive operations to the queue.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (void)closeAfterSendingAndReceiving</Declaration>
			
			
			<Anchor>//api/name/closeAfterSendingAndReceiving</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/maxReceiveBufferSize</TokenIdentifier>
			<Abstract type="html">Gets/Sets the maximum size of the buffer that will be allocated for receive operations.
The default size is 9216 bytes.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (UInt32)maxReceiveBufferSize</Declaration>
			
			
			<Anchor>//api/name/maxReceiveBufferSize</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/setMaxReceiveBufferSize:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (void)setMaxReceiveBufferSize:(UInt32)max</Declaration>
			
			
			<Anchor>//api/name/setMaxReceiveBufferSize:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/moveToRunLoop:</TokenIdentifier>
			<Abstract type="html">When you create an AsyncUdpSocket, it is added to the runloop of the current thread.
So it is easiest to simply create the socket on the thread you intend to use it.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)moveToRunLoop:(NSRunLoop *)runLoop</Declaration>
			
			
			<Anchor>//api/name/moveToRunLoop:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/setRunLoopModes:</TokenIdentifier>
			<Abstract type="html">Allows you to configure which run loop modes the socket uses.
The default set of run loop modes is NSDefaultRunLoopMode.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)setRunLoopModes:(NSArray *)runLoopModes</Declaration>
			
			
			<Anchor>//api/name/setRunLoopModes:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AsyncUdpSocket/runLoopModes</TokenIdentifier>
			<Abstract type="html">Returns the current run loop modes the AsyncSocket instance is operating in.
The default set of run loop modes is NSDefaultRunLoopMode.</Abstract>
			<DeclaredIn>AsyncUdpSocket.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)runLoopModes</Declaration>
			
			
			<Anchor>//api/name/runLoopModes</Anchor>
		</Token>
		
	</File>
</Tokens>