<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Protocols/AsyncSocketDelegate.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intf/AsyncSocketDelegate</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AsyncSocket.h</DeclaredIn>
			
			<NodeRef refid="5"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/AsyncSocketDelegate/onSocket:willDisconnectWithError:</TokenIdentifier>
			<Abstract type="html">In the event of an error, the socket is closed.
You may call &quot;unreadData&quot; during this call-back to get the last bit of data off the socket.
When connecting, this delegate method may be called
before&quot;onSocket:didAcceptNewSocket:&quot; or &quot;onSocket:didConnectToHost:&quot;.</Abstract>
			<DeclaredIn>AsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)onSocket:(AsyncSocket *)sock willDisconnectWithError:(NSError *)err</Declaration>
			
			
			<Anchor>//api/name/onSocket:willDisconnectWithError:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/AsyncSocketDelegate/onSocketDidDisconnect:</TokenIdentifier>
			<Abstract type="html">Called when a socket disconnects with or without error.  If you want to release a socket after it disconnects,
do so here. It is not safe to do that during &quot;onSocket:willDisconnectWithError:&quot;.</Abstract>
			<DeclaredIn>AsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)onSocketDidDisconnect:(AsyncSocket *)sock</Declaration>
			
			
			<Anchor>//api/name/onSocketDidDisconnect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/AsyncSocketDelegate/onSocket:didAcceptNewSocket:</TokenIdentifier>
			<Abstract type="html">Called when a socket accepts a connection.  Another socket is spawned to handle it. The new socket will have
the same delegate and will call &quot;onSocket:didConnectToHost:port:&quot;.</Abstract>
			<DeclaredIn>AsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)onSocket:(AsyncSocket *)sock didAcceptNewSocket:(AsyncSocket *)newSocket</Declaration>
			
			
			<Anchor>//api/name/onSocket:didAcceptNewSocket:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/AsyncSocketDelegate/onSocket:wantsRunLoopForNewSocket:</TokenIdentifier>
			<Abstract type="html">Called when a new socket is spawned to handle a connection.  This method should return the run-loop of the
thread on which the new socket and its delegate should operate. If omitted, [NSRunLoop currentRunLoop] is used.</Abstract>
			<DeclaredIn>AsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (NSRunLoop *)onSocket:(AsyncSocket *)sock wantsRunLoopForNewSocket:(AsyncSocket *)newSocket</Declaration>
			
			
			<Anchor>//api/name/onSocket:wantsRunLoopForNewSocket:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/AsyncSocketDelegate/onSocketWillConnect:</TokenIdentifier>
			<Abstract type="html">Called when a socket is about to connect. This method should return YES to continue, or NO to abort.
If aborted, will result in AsyncSocketCanceledError.</Abstract>
			<DeclaredIn>AsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (BOOL)onSocketWillConnect:(AsyncSocket *)sock</Declaration>
			
			
			<Anchor>//api/name/onSocketWillConnect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/AsyncSocketDelegate/onSocket:didConnectToHost:port:</TokenIdentifier>
			<Abstract type="html">Called when a socket connects and is ready for reading and writing.
The host parameter will be an IP address, not a DNS name.</Abstract>
			<DeclaredIn>AsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)onSocket:(AsyncSocket *)sock didConnectToHost:(NSString *)host port:(UInt16)port</Declaration>
			
			
			<Anchor>//api/name/onSocket:didConnectToHost:port:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/AsyncSocketDelegate/onSocket:didReadData:withTag:</TokenIdentifier>
			<Abstract type="html">Called when a socket has completed reading the requested data into memory.
Not called if there is an error.</Abstract>
			<DeclaredIn>AsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)onSocket:(AsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/onSocket:didReadData:withTag:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/AsyncSocketDelegate/onSocket:didReadPartialDataOfLength:tag:</TokenIdentifier>
			<Abstract type="html">Called when a socket has read in data, but has not yet completed the read.
This would occur if using readToData: or readToLength: methods.
It may be used to for things such as updating progress bars.</Abstract>
			<DeclaredIn>AsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)onSocket:(AsyncSocket *)sock didReadPartialDataOfLength:(NSUInteger)partialLength tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/onSocket:didReadPartialDataOfLength:tag:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/AsyncSocketDelegate/onSocket:didWriteDataWithTag:</TokenIdentifier>
			<Abstract type="html">Called when a socket has completed writing the requested data. Not called if there is an error.</Abstract>
			<DeclaredIn>AsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)onSocket:(AsyncSocket *)sock didWriteDataWithTag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/onSocket:didWriteDataWithTag:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/AsyncSocketDelegate/onSocket:didWritePartialDataOfLength:tag:</TokenIdentifier>
			<Abstract type="html">Called when a socket has written some data, but has not yet completed the entire write.
It may be used to for things such as updating progress bars.</Abstract>
			<DeclaredIn>AsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)onSocket:(AsyncSocket *)sock didWritePartialDataOfLength:(NSUInteger)partialLength tag:(long)tag</Declaration>
			
			
			<Anchor>//api/name/onSocket:didWritePartialDataOfLength:tag:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/AsyncSocketDelegate/onSocket:shouldTimeoutReadWithTag:elapsed:bytesDone:</TokenIdentifier>
			<Abstract type="html">Called if a read operation has reached its timeout without completing.
This method allows you to optionally extend the timeout.
If you return a positive time interval (&gt; 0) the read&apos;s timeout will be extended by the given amount.
If you don&apos;t implement this method, or return a non-positive time interval (&lt;= 0) the read will timeout as usual.</Abstract>
			<DeclaredIn>AsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (NSTimeInterval)onSocket:(AsyncSocket *)sock shouldTimeoutReadWithTag:(long)tag elapsed:(NSTimeInterval)elapsed bytesDone:(NSUInteger)length</Declaration>
			
			
			<Anchor>//api/name/onSocket:shouldTimeoutReadWithTag:elapsed:bytesDone:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/AsyncSocketDelegate/onSocket:shouldTimeoutWriteWithTag:elapsed:bytesDone:</TokenIdentifier>
			<Abstract type="html">Called if a write operation has reached its timeout without completing.
This method allows you to optionally extend the timeout.
If you return a positive time interval (&gt; 0) the write&apos;s timeout will be extended by the given amount.
If you don&apos;t implement this method, or return a non-positive time interval (&lt;= 0) the write will timeout as usual.</Abstract>
			<DeclaredIn>AsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (NSTimeInterval)onSocket:(AsyncSocket *)sock shouldTimeoutWriteWithTag:(long)tag elapsed:(NSTimeInterval)elapsed bytesDone:(NSUInteger)length</Declaration>
			
			
			<Anchor>//api/name/onSocket:shouldTimeoutWriteWithTag:elapsed:bytesDone:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/AsyncSocketDelegate/onSocketDidSecure:</TokenIdentifier>
			<Abstract type="html">Called after the socket has successfully completed SSL/TLS negotiation.
This method is not called unless you use the provided startTLS method.</Abstract>
			<DeclaredIn>AsyncSocket.h</DeclaredIn>			
			
			<Declaration>- (void)onSocketDidSecure:(AsyncSocket *)sock</Declaration>
			
			
			<Anchor>//api/name/onSocketDidSecure:</Anchor>
		</Token>
		
	</File>
</Tokens>